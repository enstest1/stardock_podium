---
description: 
globs: 
alwaysApply: true
---
# Code Styling Guidelines

This rule defines the preferred code style for this Python project.

**Context:**
Consistent code styling improves readability, maintainability, and collaboration. This project adheres to standard Python conventions.

**Guidelines:**

1.  **PEP 8 Adherence:** All code should adhere strictly to the PEP 8 style guide.
2.  **Indentation:** Use 4 spaces per indentation level. Do not use tabs.
3.  **Line Length:** Limit lines to a maximum of 79 characters for code and 72 characters for docstrings and comments. Use parentheses for continuation across lines where necessary.
4.  **Naming Conventions:**
    *   Modules: short, lowercase names (`module_name.py`).
    *   Packages: short, lowercase names (`package_name/`).
    *   Classes: CapWords (`ClassName`).
    *   Functions/Methods: lowercase, words separated by underscores (`function_name`).
    *   Variables: lowercase, words separated by underscores (`variable_name`).
    *   Constants: uppercase, words separated by underscores (`CONSTANT_NAME`).
5.  **Blank Lines:** Use blank lines to separate top-level function and class definitions (two blank lines). Use blank lines to separate method definitions within a class and logical sections within functions/methods (one blank line).
6.  **Imports:** Imports should generally be placed at the top of the file, grouped in the following order:
    *   Standard library imports.
    *   Third-party library imports.
    *   Local application-specific imports.
    *   Sort imports alphabetically within each group.
7.  **Whitespace:** Use whitespace judiciously around operators, after commas, etc., to improve readability, following PEP 8 recommendations.
8.  **Quotes:** Be consistent with quotes. Generally, prefer single quotes (`'`) for strings, reserving double quotes (`"`) for docstrings or strings that contain single quotes.
9.  **Type Hinting:** Use type hints (`def my_function(arg: str) -> List[int]:`) for function arguments and return values where appropriate to improve code clarity and enable static analysis.

Following these guidelines will ensure a consistent and readable codebase. The AI should aim to produce code that conforms to these standards automatically.