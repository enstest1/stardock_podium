---
description: 
globs: 
alwaysApply: true
---
# Project Structure Guidelines

This rule describes the standard directory structure and the intended purpose of each module within this project.

**Context:**
This project is organized into a main directory containing Python modules and data subdirectories. Maintaining this structure is crucial for modularity, clarity, and efficient operation by the AI assistant.

**Guidelines:**

1.  **Root Directory (`.`):**
    *   Contains the main entry point (`main.py`) and the CLI command parser (`cli_entrypoint.py`).
    *   Contains the core Python modules (`*.py` files), each generally responsible for a specific domain or set of related functionalities (e.g., `epub_processor.py` for EPUBs, `story_structure.py` for narrative logic, `audio_pipeline.py` for audio).
    *   Includes configuration files like `.env` and `.claude/settings.local.json`.
    *   Includes project-level documentation like `README.md` and `SETUP_GUIDE.md`.
    *   Includes the `requirements.txt` for dependencies.

2.  **Data Directories:**
    *   `books/`: Stores processed content and metadata from ingested EPUB files. Each book gets its own subdirectory (`books/<book_id>/`).
    *   `analysis/`: Stores style and content analysis results generated from books.
    *   `episodes/`: Stores all data related to individual podcast episodes. Each episode gets its own subdirectory (`episodes/<episode_id>/`). This subdirectory contains the episode structure (`structure.json`), script (`script.json`), metadata (`metadata.json`), quality check results (`quality_check.json`), and generated audio (`audio/`).
    *   `audio/`: (Within an episode directory) Stores generated audio files for that specific episode, including scene audio and the final mix.
    *   `voices/`: Stores the voice registry data (`registry.json`) for ElevenLabs voice IDs and character mappings.
    *   `data/`: Stores general application data, such as the Mem0 configuration (`mem0_config.json`), series registry, and tag registry (`metadata/`).
    *   `temp/`: Used for temporary files during processing.
    *   `logs/`: Stores application log files.

3.  **Module Responsibilities:**
    *   `main.py`: Entry point, environment checks, directory creation, module initialization.
    *   `cli_entrypoint.py`: Defines and parses command-line arguments, routes commands to appropriate functions.
    *   `mem0_client.py`: Wrapper for Mem0 SDK, handles connection and core memory operations.
    *   `epub_processor.py`: Reads EPUB files, extracts metadata and text content, splits content into sections.
    *   `book_style_analysis.py`: Analyzes text content for writing style, themes, characters, etc.
    *   `reference_memory_sync.py`: Synchronizes processed book sections with the Mem0 database.
    *   `story_structure.py`: Generates episode outlines and beats (Save the Cat), coordinates scene generation.
    *   `episode_memory.py`: Extracts specific memory points (plot, character dev, continuity) from episodes and adds them to Mem0.
    *   `voice_registry.py`: Manages the mapping of characters to ElevenLabs voice IDs, handles voice generation/retrieval.
    *   `episode_metadata.py`: Manages episode tags, series, status, and generates feeds.
    *   `script_editor.py`: Provides functions for loading, saving, manual editing, and regenerating episode scripts.
    *   `audio_pipeline.py`: Handles audio generation for scripts, including voice synthesis, sound effects, and mixing.
    *   `quality_checker.py`: Analyzes generated scripts and audio files for quality issues.
    *   `tests/`: Contains unit tests for various modules.

4.  **Adding New Code:**
    *   When adding new functionality, place the code in the module whose responsibility aligns best with the new feature.
    *   If a new, distinct functional area is created, add a new `.py` file in the root directory.
    *   If the new code needs to be accessible via the CLI, add a new command definition and handler function in `cli_entrypoint.py`.

Adhering to this structure ensures the codebase remains organized, maintainable, and easy for the AI assistant to navigate and modify correctly.